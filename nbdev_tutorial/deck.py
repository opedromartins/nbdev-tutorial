# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_deck.ipynb.

# %% auto 0
__all__ = ['Deck', 'draw_n']

# %% ../nbs/01_deck.ipynb 2
from .card import *
from fastcore.utils import *
import random

# %% ../nbs/01_deck.ipynb 4
class Deck:
    """A deck of 52 cards, not including jokers."""
    def __init__(self):
        self.cards = [Card(s, r) for s in range(4) for r in range(1, 14)]

    def __len__(self):
        return len(self.cards)

    def __str__(self):
        return '; '.join(map(str, self.cards))
    
    def __contains__(self, card):
        return card in self.cards
    
    def shuffle(self):
        """Shuffle the cards."""
        random.shuffle(self.cards)
    
    __repr__ = __str__

# %% ../nbs/01_deck.ipynb 11
@patch
def pop(self:Deck,
        idx:int=-1): # The index of the card to remove (default: last card)
    """Remove and return one card."""
    return self.cards.pop(idx)

# %% ../nbs/01_deck.ipynb 16
@patch
def remove(self:Deck,
           card:Card):
    """Remove a specific card."""
    self.cards.remove(card)

# %% ../nbs/01_deck.ipynb 19
def draw_n(n:int, # The number of cards to draw
           replace:bool=True): # Whether to replace the cards after drawing
    """Draw n cards from the deck."""
    d = Deck()
    d.shuffle()
    if replace: return [d.cards[random.choice(range(len(d.cards)))] for _ in range(n) ]
    else: return d.cards[:n]
